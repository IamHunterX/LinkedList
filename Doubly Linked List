// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

struct node{
    int val;
    struct node *prev;
    struct node *next;
};
struct node *head = NULL;
struct node *tail = NULL;
int lenOfNodes = 0;
void InsertAtBeg(int n);
void InsertAtEnd(int n);
void InsertAtSpecific(int n,int pos);
void Deletion();
void Reverse();
void Display();
int main() {
    InsertAtBeg(5);
    InsertAtBeg(2);
    InsertAtBeg(3);
    InsertAtEnd(4);
    InsertAtSpecific(9,5);
    cout<<lenOfNodes;
    cout<<" is the length"<<endl;
    Display();
    
    return 0;
}
void InsertAtBeg(int n){
    int counter = 0;
    struct node *p;
    struct node *temp;
    if(head==NULL){
        counter++;
        p = new node;
        p->val = n;
        p->next = NULL;
        p->prev = NULL;
        head = p;
        tail = head;
    }
    else{
        
        p = new node;
        p->val = n;
        head->prev = p;
        p->next = head;
        head = p;
        if(counter==1){
            tail->prev = head;
            counter++;
        }
    }
    
    lenOfNodes++;
    cout<<lenOfNodes;
    cout<<" is the length"<<endl;
}
void InsertAtEnd(int n){
    struct node *p;
    struct node *temp;
    if(head==NULL && tail == NULL){
        p = new node;
        p->val = n;
        p->next = NULL;
        p->prev = NULL;
        head = p;
        tail = head;
    }
    else{
        p = new node;
        p->val = n;
        tail->next = p;
        p->prev = tail;
        tail = p;
    }
    lenOfNodes++;
    cout<<lenOfNodes;
    cout<<" is the length"<<endl;
}
void InsertAtSpecific(int n,int pos){
    if(pos<1 || pos>lenOfNodes+1){
        cout<<"Invalid Position"<<endl;
    }
    else if(pos == 1){
        InsertAtBeg(n);
        lenOfNodes++;
    }
    else if(pos == lenOfNodes+1){
        InsertAtEnd(n);
        lenOfNodes++;
    }
    else{
        int i = 1;
        struct node *temp;
        temp = head;
        struct node *p;
        p = new node;
        p->val = n;
        while(i<lenOfNodes+1){
            temp = temp->next;
            i++;
        }
        p->next = temp->next;
        p->prev = temp;
        temp->next->prev = p;
        temp->next = p;
        lenOfNodes++;
    }
    cout<<lenOfNodes;
    cout<<" is the length"<<endl;
    
}
void Deletion(){
    node *temp;
    node *p;
    if(head==NULL){
        cout<<"List is empty"<<endl;
    }
    else if(head->next==NULL && head->prev== NULL){
        cout<<head->val;
        cout<<" is deleted"<<endl;
        head->val = 0;
    }
    else{
        p = new node;
        p = head;
        p=p->next;
        temp = new node;
        temp = head;
        p->prev = temp->prev;
        head = temp->next;
        cout<<temp->val;
        cout<<" is deleted"<<endl;
        //delete(temp);
    }
}
/*void Reverse(){
    node *current=head;
    node *prev=0;
    node *next=head;
    if(head!=NULL){
        while(next!=NULL){
        next = next->ptr;
        current->ptr = prev;
        prev = current;
        current = next;
    }
    head = prev;
    }
    else{
        cout<<"List is empty"<<endl;
    }
}*/
void Display(){
    if(head==NULL){
        cout<<"List is empty"<<endl;
    }
    else{
        struct node *temp;
        temp = new node;
        temp = head;
        while(temp!=tail){
            cout<<temp->val<<endl;
            temp = temp->next;
        }
        cout<<temp->val<<endl;
    }
}
